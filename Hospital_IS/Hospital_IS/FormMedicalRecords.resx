<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>